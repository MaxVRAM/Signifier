#!/usr/bin/env python3

#  __________                         __  .__                              .__     
#  \______   \_____    ______ _______/  |_|  |_________  ____  __ __  ____ |  |__  
#   |     ___/\__  \  /  ___//  ___/\   __\  |  \_  __ \/  _ \|  |  \/ ___\|  |  \ 
#   |    |     / __ \_\___ \ \___ \  |  | |   Y  \  | \(  <_> )  |  / /_/  >   Y  \
#   |____|    (____  /____  >____  > |__| |___|  /__|   \____/|____/\___  /|___|  /
#                  \/     \/     \/            \/                  /_____/      \/ 

"""Signify module to pass audio generated by the Clip Manager to the designated
audio output device. This module also produces analyise data on the incoming audio
stream, which can be sent to the arduino to modulate the LEDs."""

# sudo modprobe snd-aloop

import time
import queue
import random
import logging
import threading
import numpy as np
import sounddevice as sd

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

q = queue.Queue()
active = False
loopback: str
output: str
sample_rate: int
bit_size: str
buffer: int
latency: float
sig_callback: None
thread = threading.Thread


def parse_samples(indata, outdata, frames, time, status):
    if status:
        print(f'Passthrough audio device status: {status}')
    rando = random.randint(0, 100)
    rms = np.sqrt(np.mean(indata**2))
    q.put(rms)
    outdata[:] = indata


def init(config=None, callback=None):
    global active, loopback, output, sample_rate, bit_size,\
        buffer, latency, sig_callback
    if config is None:
        config = {
            "enabled":True,
            "loopback_device":"Loopback: PCM (hw:3,1)",
            "output_device":"bcm2835 Headphones: - (hw:0,0)",
            "sample_rate":44100,
            "bit_size":-16,
            "buffer":2048,
            "latency":0.1}
    active = True
    loopback = config['loopback_device']
    output = config['output_device']
    sample_rate = config['sample_rate']
    bit_size = config['bit_size']
    buffer = config['buffer']
    latency = config['latency']
    sig_callback = callback
    logger.debug('Audio passthrough module ready.')


def stream():
    global thread 
    thread = threading.current_thread()
    logger.debug(f'Audio passthrough thread running: {thread}')
    while getattr(thread, "keep_going", True):
        with sd.Stream(device=(loopback, output), latency=0.1,
                    samplerate=sample_rate, blocksize=0,
                    dtype='int16', channels=1, callback=parse_samples):
            if sig_callback is None:
                print(f'Callback: {q.get()}')
            else:
                sig_callback(q.get())


def run():
    global thread
    if thread is not None:
        stop()
        #thread.join()
    thread = threading.Thread(target=stream)
    thread.start()


def stop():
    global thread
    if thread is not None:
        logger.info(f'Stopping audio passthrough thread.')
        thread.keep_going = False