
#  __________                         __  .__                              .__     
#  \______   \_____    ______ _______/  |_|  |_________  ____  __ __  ____ |  |__  
#   |     ___/\__  \  /  ___//  ___/\   __\  |  \_  __ \/  _ \|  |  \/ ___\|  |  \ 
#   |    |     / __ \_\___ \ \___ \  |  | |   Y  \  | \(  <_> )  |  / /_/  >   Y  \
#   |____|    (____  /____  >____  > |__| |___|  /__|   \____/|____/\___  /|___|  /
#                  \/     \/     \/            \/                  /_____/      \/ 

"""Signify module to pass audio generated by the Clip Manager to the designated
audio output device. This module also produces analyise data on the incoming audio
stream, which can be sent to the arduino to modulate the LEDs."""

import time
import queue
import random
import logging
import sounddevice as sd

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

q = queue.Queue()

# class Passthrough:
#     def __init__(self, config) -> None:
#         if config is None:
#             config = {
#                 "enabled":True,
#                 "loopback_device":"Loopback: PCM (hw:3,1)",
#                 "output_device":"bcm2835 Headphones: - (hw:0,0)",
#                 "sample_rate":44100,
#                 "bit_size":-16,
#                 "buffer":2048,
#                 "latency":500}
#         self.active = False
#         self.loopback = config['loopback_device']
#         self.output = config['output_device']
#         self.sample_rate = config['sample_rate']
#         self.bit_size = config['bit_size']
#         self.buffer = config['buffer']
#         self.latency = config['latency']


def callback(indata, outdata, frames, time, status):
    if status:
        print(status)
    q.put(random.randint(0, 100))
    outdata[:] = indata


def stream(config, passthrough_callback):
    active = True
    loopback = config['loopback_device']
    output = config['output_device']
    sample_rate = config['sample_rate']
    bit_size = config['bit_size']
    buffer = config['buffer']
    latency = config['latency']
    
    
    while active:
        with sd.Stream(device=(loopback, output),
                    samplerate=sample_rate, blocksize=0,
                    dtype='float32', latency=latency,
                    channels=1, callback=callback):
            passthrough_callback(q.get())