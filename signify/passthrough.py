
#  __________                         __  .__                              .__     
#  \______   \_____    ______ _______/  |_|  |_________  ____  __ __  ____ |  |__  
#   |     ___/\__  \  /  ___//  ___/\   __\  |  \_  __ \/  _ \|  |  \/ ___\|  |  \ 
#   |    |     / __ \_\___ \ \___ \  |  | |   Y  \  | \(  <_> )  |  / /_/  >   Y  \
#   |____|    (____  /____  >____  > |__| |___|  /__|   \____/|____/\___  /|___|  /
#                  \/     \/     \/            \/                  /_____/      \/ 

"""Signify module to pass audio generated by the Clip Manager to the designated
audio output device. This module also produces analyise data on the incoming audio
stream, which can be sent to the arduino to modulate the LEDs."""

# sudo modprobe snd-aloop

import time
import queue
import random
import logging
import threading
import numpy as np
import sounddevice as sd

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

q = queue.Queue()


def callback(indata, outdata, frames, time, status):
    if status:
        print(f'Passthrough audio device status: {status}')
    rando = random.randint(0, 100)
    rms = np.sqrt(np.mean(indata**2))
    q.put(rms)
    outdata[:] = indata


class Passthrough:
    def __init__(self, config, sig_callback) -> None:
        if config is None:
            config = {
                "enabled":True,
                "loopback_device":"Loopback: PCM (hw:3,1)",
                "output_device":"bcm2835 Headphones: - (hw:0,0)",
                "sample_rate":44100,
                "bit_size":-16,
                "buffer":2048,
                "latency":500}
        self.active = True
        self.loopback = config['loopback_device']
        self.output = config['output_device']
        self.sample_rate = config['sample_rate']
        self.bit_size = config['bit_size']
        self.buffer = config['buffer']
        self.latency = config['latency']
        self.sig_callback = sig_callback
        self.thread = threading.Thread


    def stream(self):
        thread = threading.current_thread()
        while getattr(thread, "keep_going", True):
            with sd.Stream(device=(self.loopback, self.output),
                        samplerate=self.sample_rate, blocksize=0,
                        dtype='float32', channels=1, callback=callback):
                self.sig_callback(q.get())


    def run(self):
        self.thread = threading.Thread(target=self.stream)
        self.thread.start()


    def stop(self):
        logger.info(f'Stopping audio passthrough thread...')
        self.thread.keep_going = False
