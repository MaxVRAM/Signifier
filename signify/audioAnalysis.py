#!/usr/bin/env python3

#  __________                         __  .__                              .__     
#  \______   \_____    ______ _______/  |_|  |_________  ____  __ __  ____ |  |__  
#   |     ___/\__  \  /  ___//  ___/\   __\  |  \_  __ \/  _ \|  |  \/ ___\|  |  \ 
#   |    |     / __ \_\___ \ \___ \  |  | |   Y  \  | \(  <_> )  |  / /_/  >   Y  \
#   |____|    (____  /____  >____  > |__| |___|  /__|   \____/|____/\___  /|___|  /
#                  \/     \/     \/            \/                  /_____/      \/ 

"""Signify module to pass audio generated by the Clip Manager to the designated
audio output device. This module also produces analyise data on the incoming audio
stream, which can be sent to the arduino to modulate the LEDs."""

# Primary research sources:
# - https://stackoverflow.com/questions/66964597/python-gui-freezing-problem-of-thread-using-tkinter-and-sounddevice


import queue
import logging
import threading
import numpy as np
import sounddevice as sd

from signify.utils import ExpFilter as Filter

DEFAULT_CONF = {
    "enabled":True,
    "loopback_return":1,
    "hw_loop_output":0,
    "sample_rate":44100,
    "buffer":4096 }

sd.default.device = (1,0)
sd.default.channels = (1,1)
sd.default.samplerate = DEFAULT_CONF['sample_rate']

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)


class Analyser(threading.Thread):
    """Perform audio analysis on the default PulseAudio input device.\n
    Supply the audio portion of `config.json`, ie `config=config['audio']`."""
    def __init__(self, return_q:queue.Queue, control_q:queue.Queue, config=None):
        super().__init__()
        if config is None:
            config = DEFAULT_CONF
        else:
            self.active = True
            self.sample_rate = config['sample_rate']
            self.buffer = config['buffer']
        sd.default.channels = 1
        sd.default.samplerate = self.sample_rate
        self.event = threading.Event()
        self.streaming = True
        self.rms = Filter(0, alpha_decay=0.02, alpha_rise=0.02)
        self.peak = 0
        self.analysis_data = {}
        self.analysis_q = return_q
        self.control_q = control_q
        logger.debug('Audio passthrough module initialised.')


    def run(self):
        """Begin executing Analyser thread to produce audio descriptors.\
        These are returned to the `analysis_return_q` in the main thread."""
        logger.debug('Starting audio analysis thread...')
        self.event.clear()
        with sd.InputStream(device='pulse', channels=1,
                callback=self.process_audio, finished_callback=self.event.set):
            while not self.event.is_set():
                try:
                    if self.control_q.get_nowait() == 'close':
                        self.event.set()
                except queue.Empty:
                    pass
        self.streaming = False
        logger.info('Audio analysis thread closed.')


    def process_audio(self, indata, frames, time, status):
        """The primary function called by the Streaming thread. This function\
        calculates the amplitude of the input signal, then streams it to the\
        output audio device."""
        if status:
            logger.debug(status)
        self.peak = np.max(np.abs(indata))
        with np.errstate(divide='ignore'):
            rms = 20 * np.log10(rms_flat(indata) / 2e-5)
            rms = rms if np.isfinite(rms) else 0
        rms = self.rms.update(rms)
        try:
            data = {"peak":self.peak, "dba":rms}
            self.analysis_q.put_nowait(data)
        except queue.Full:
            pass


    # def terminate(self):
    #     """Requests that the Stream thread aborts current buffer processing\
    #     and provides an `event.set()` call to terminate the thread."""
    #     print()
    #     logger.info(f'Stopping audio streaming thread...')
    #     self.streaming = False
    #     self.event.set()
    #     sd.sleep(100)
    #     self.stream.abort()



def rms_flat(a):
    """Return the root mean square of all the elements of *a*, flattened out."""
    # https://github.com/SiggiGue/pyfilterbank/issues/17
    return np.sqrt(np.mean(np.absolute(a)**2))
